import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { Message, Poster, PosterWithReasons, UpdateData } from '../utils/types';
import * as fs from 'fs';
import { errors, posterStatuses, roles } from '../utils/commonVars';
import path from 'path';
import { formatDate, getDateToday } from '../utils/commonFunctions';

const prisma = new PrismaClient();

function returnUserInfoToMakeDecisions(req: Request) {
   const isAuth = req.payload && req.payload.payload ? true : false
   const isNotAdmin = req.payload && req.payload.payload && req.payload.payload.role === 'admin' ? false : true
   return {
      isAuth: isAuth,
      isNotAdmin: isNotAdmin,
   }
}

class PosterController {
   async getAllPosters(req: Request, res: Response) {
      const role = req.payload?.payload?.role;

      if (role === roles.admin) {   // –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ, (–∫—Ä–æ–º–µ –∏–º–µ—é—â–∏—Ö —Å—Ç–∞—Ç—É—Å –£–¥–∞–ª–µ–Ω–æ - –Ω–µ—Ç, –ø–æ–∫–∞ –∞–±–æ—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ), –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –ø–æ id (–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫ –ø–µ—Ä–≤–æ–º—É)

         const posterStatusFull = await prisma.posterStatuses.findFirst({
            where: {
               statusName: posterStatuses.deleted
            }
         });
         console.log("üöÄ ~ file: PosterController.ts:21 ~ PosterController ~ getAllPosters ~ posterStatusFull:", posterStatusFull)
         // where - —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ
         const postersArr: Poster[] = await prisma.posters.findMany({
            // where: {
            //    posterStatusId: {
            //       not: posterStatusFull?.id,
            //    }
            // },
            include: {
               ObjectCategories: {
                  select: {
                     category: true,
                  },
               },
               PosterStatuses: {
                  select: {
                     statusName: true
                  }
               },
            },
            orderBy: {
               id: 'desc',
            },
         });

         postersArr.map(poster => {
            const dtAct = formatDate(new Date(poster.dateOfAction))
            poster.dateOfAction = dtAct;

            if (poster.publishDate && poster.publishDate !== null) {
               const dtPub = formatDate(new Date(poster.publishDate))
               poster.publishDate = dtPub;
            }

            return poster
         })

         // const posterArrNormalDate = postersArr.map(poster => {
         //    console.log('----------');

         //    console.log(new Date(poster.dateOfAction));

         //    return new Date(poster.dateOfAction)
         // })

         const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
         const message: Message = {
            message: postersArr,
            accountInfo: {
               isAuth: isAuth,
               isNotAdmin: isNotAdmin,
            }
         };
         res.json(message);
         return;
      }
      else {   // –≤—Å–µ, –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞, –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
         const posterStatusFull = await prisma.posterStatuses.findFirst({
            where: {
               statusName: posterStatuses.published
            }
         });
         console.log("üöÄ ~ file: PosterController.ts:46 ~ PosterController ~ getAllPosters ~ posterStatusFull:", posterStatusFull)

         const postersArr: Poster[] = await prisma.posters.findMany({
            where: {
               posterStatusId: posterStatusFull?.id
            },
            include: {
               ObjectCategories: {
                  select: {
                     category: true,
                  },
               },
               PosterStatuses: {
                  select: {
                     statusName: true
                  }
               },
            },
            orderBy: {
               publishDate: 'desc',
            },
         });

         postersArr.map(poster => {
            const dtAct = formatDate(new Date(poster.dateOfAction))
            poster.dateOfAction = dtAct;

            if (poster.publishDate && poster.publishDate !== null) {
               const dtPub = formatDate(new Date(poster.publishDate))
               poster.publishDate = dtPub;
            }

            return poster
         })

         const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);

         const message: Message = {
            message: postersArr,
            accountInfo: {
               isAuth: isAuth,
               isNotAdmin: isNotAdmin,
            }
         };
         // const message: Message = {
         //    message: postersArr,
         // };
         res.json(message);
         return;
      }

      // try {
      //    const posterId = parseInt(req.params.id);
      //    const poster = await prisma.posters.findUnique({
      //       where: {
      //          id: posterId,
      //       },
      //    });

      //    res.json(poster);
      //    return;
      // } catch (error) {
      //    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
      //    const message: Message = {
      //       error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
      //    };
      //    res.status(500).json(message);
      //    return;
      // }
   }

   async getAllPostersFiltered(req: Request, res: Response) {
      const role = req.payload?.payload?.role;
      const { posterStatusName, isPet, objectCategory, description, itemStatus, dateOfAction, address, phone } = req.body;

      if (role === roles.admin) {   // –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ, (–∫—Ä–æ–º–µ –∏–º–µ—é—â–∏—Ö —Å—Ç–∞—Ç—É—Å –£–¥–∞–ª–µ–Ω–æ - –Ω–µ—Ç, –ø–æ–∫–∞ –∞–±–æ—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ), –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –ø–æ id (–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫ –ø–µ—Ä–≤–æ–º—É)

         // const posterStatusFull = await prisma.posterStatuses.findFirst({
         //    where: {
         //       statusName: posterStatuses.deleted
         //    }
         // });

         const posterStatusFull = await prisma.posterStatuses.findFirst({
            where: {
               statusName: posterStatusName
            }
         });

         // console.log("üöÄ ~ file: PosterController.ts:21 ~ PosterController ~ getAllPosters ~ posterStatusFull:", posterStatusFull)
         // where - —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–µ
         const postersArr: Poster[] = await prisma.posters.findMany({
            // where: {
            //    posterStatusId: {
            //       not: posterStatusFull?.id,
            //    }
            // },
            where: {
               posterStatusId: posterStatusFull?.id
            },
            include: {
               ObjectCategories: {
                  select: {
                     category: true,
                  },
               },
               PosterStatuses: {
                  select: {
                     statusName: true
                  }
               },
            },
            orderBy: {
               id: 'asc',
            },
         });

         postersArr.map(poster => {
            const dtAct = formatDate(new Date(poster.dateOfAction))
            poster.dateOfAction = dtAct;

            if (poster.publishDate && poster.publishDate !== null) {
               const dtPub = formatDate(new Date(poster.publishDate))
               poster.publishDate = dtPub;
            }

            return poster
         })

         // const posterArrNormalDate = postersArr.map(poster => {
         console.log('----------');

         //    console.log(new Date(poster.dateOfAction));

         //    return new Date(poster.dateOfAction)
         // })

         const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
         const message: Message = {
            message: postersArr,
            accountInfo: {
               isAuth: isAuth,
               isNotAdmin: isNotAdmin,
            }
         };
         res.json(message);
         return;
      }
      else {   // –≤—Å–µ, –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞, –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
         console.log('---user filter start-------');
         const posterStatusFull = await prisma.posterStatuses.findFirst({
            where: {
               statusName: posterStatuses.published
            }
         });

         const itemCategoryFull = await prisma.objectCategories.findFirst({
            where: {
               category: objectCategory
            }
         });

         const filters: any = {
            posterStatusId: posterStatusFull?.id,
         };

         if (itemStatus !== undefined) {
            filters.itemStatus = { equals: itemStatus };
         }

         if (isPet !== undefined) {
            filters.isPet = { equals: isPet };
         }

         if (objectCategory) {

            filters.itemCategoryId = { equals: itemCategoryFull?.id };
         }

         console.log("üöÄ ~ file: PosterController.ts:270 ~ getAllPostersFiltered ~ filters:", filters)
         console.log('---user filter end-------');
         const postersArr: Poster[] = await prisma.posters.findMany({
            where: filters,
            include: {
               ObjectCategories: {
                  select: {
                     category: true,
                  },
               },
               PosterStatuses: {
                  select: {
                     statusName: true
                  }
               },
            },
            orderBy: {
               publishDate: 'desc',
            },
         });
         // const itemStatusFull = await prisma..findFirst({
         //    where: {
         //       statusName: posterStatuses.published
         //    }
         // });

         // const postersArr: Poster[] = await prisma.posters.findMany({
         //    where: {
         //       posterStatusId: posterStatusFull?.id,
         //       itemStatus: itemStatus || undefined
         //    },
         //    include: {
         //       ObjectCategories: {
         //          select: {
         //             category: true,
         //          },
         //       },
         //       PosterStatuses: {
         //          select: {
         //             statusName: true
         //          }
         //       },
         //    },
         //    orderBy: {
         //       publishDate: 'desc',
         //    },
         // });

         postersArr.map(poster => {
            const dtAct = formatDate(new Date(poster.dateOfAction))
            poster.dateOfAction = dtAct;

            if (poster.publishDate && poster.publishDate !== null) {
               const dtPub = formatDate(new Date(poster.publishDate))
               poster.publishDate = dtPub;
            }

            return poster
         })

         const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);

         const message: Message = {
            // !postersArr
            message: postersArr,
            accountInfo: {
               isAuth: isAuth,
               isNotAdmin: isNotAdmin,
            }
         };
         // const message: Message = {
         //    message: postersArr,
         // };
         res.json(message);
         return;
      }
   }

   async getAllCategories(req: Request, res: Response) {
      // const role = req.payload?.payload?.role;

      const categoriesArr: {
         id: number;
         category: string;
      }[] = await prisma.objectCategories.findMany({
         orderBy: {
            category: 'asc',
         },
      });

      const categoriesNamesArr = categoriesArr.map(category => category.category)

      const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);

      const message: Message = {
         message: categoriesNamesArr,
         accountInfo: {
            isAuth: isAuth,
            isNotAdmin: isNotAdmin,
         }
      };
      // const message: Message = {
      //    message: postersArr,
      // };
      res.json(message);
      return;


      // try {
      //    const posterId = parseInt(req.params.id);
      //    const poster = await prisma.posters.findUnique({
      //       where: {
      //          id: posterId,
      //       },
      //    });

      //    res.json(poster);
      //    return;
      // } catch (error) {
      //    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
      //    const message: Message = {
      //       error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
      //    };
      //    res.status(500).json(message);
      //    return;
      // }
   }
   async getAllPosterDeleteReasons(req: Request, res: Response) {
      // const role = req.payload?.payload?.role;

      const posterDeleteReasonsArr: {
         id: number;
         reason: string;
      }[] = await prisma.posterDeleteReasons.findMany();

      const posterDeleteReasonsNamesArr = posterDeleteReasonsArr.map(reason => reason.reason)

      const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);

      const message: Message = {
         message: posterDeleteReasonsNamesArr,
         accountInfo: {
            isAuth: isAuth,
            isNotAdmin: isNotAdmin,
         }
      };

      res.json(message);
      return;
   }

   async getAllPosterStatuses(req: Request, res: Response) {

      const posterStatuses: {
         id: number;
         statusName: string;
      }[] = await prisma.posterStatuses.findMany();

      const posterStatusNamesArr = posterStatuses.map(posterStatus => posterStatus.statusName)

      const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);

      const message: Message = {
         message: posterStatusNamesArr,
         accountInfo: {
            isAuth: isAuth,
            isNotAdmin: isNotAdmin,
         }
      };

      res.json(message);
      return;
   }

   async createPoster(req: Request, res: Response) {
      console.log('--req.body', req.body);
      // console.log('--req.file', req.file);
      // console.log('--req.files', req.files);
      // res.json({ message: "Successfully uploaded files" });
      // return
      if (!req.payload) {
         const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
         const message: Message = {
            error: errors.unAuthorized,
            accountInfo: {
               isAuth: isAuth,
               isNotAdmin: isNotAdmin,
            }
         };
         res.status(401).json(message)
         return;
      }
      else {
         try {
            if (req.payload?.payload.role === roles.user) {
               //! –∫–æ–¥, –∫–æ—Ç. —Å–µ–π—á–∞—Å –¥–∞–ª–µ–µ - —Ç–æ–ª—å–∫–æ —é–∑–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞—Ç—å
               // ! UI –≤–∞–ª–∏–¥–∞—Ü–∏—è
               // !const userEmail = req.payload?.payload?.email;
               const userEmail = req.payload?.payload?.email;
               const userId = req.payload?.payload?.id || 2;
               console.log("üöÄ ~ file: PosterController.ts:159 ~ PosterController ~ createPoster ~ userId:", userId)
               console.log("üöÄ ~ file: PosterController.ts:22 ~ PosterController ~ createPoster ~ userEmail:", userEmail)
               // const today = getDateToday();
               // console.log(today);

               // ! objectStatus –Ω–∞ UI: –ø–æ—Ç–µ—Ä—è–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ
               // publishDate –Ω–µ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è, –∞ –≤ update –æ—Ç –∞–¥–º–∏–Ω–∞
               // ! address - API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã, –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∞–ª–∞ –≤—Å–µ–º –∞–¥—Ä–µ—Å–∞–º?
               const { item, breed, isPet, objectCategory, description, itemStatus, dateOfAction, address, phone, coord0, coord1 } = req.body;

               const objectCategoryFull = await prisma.objectCategories.findFirst({
                  where: {
                     category: objectCategory,
                  },
               });
               console.log("üöÄ ~ file: PosterController.ts:35 ~ PosterController ~ createPoster ~ objectCategoryFull:", objectCategoryFull)

               // –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ - –æ–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
               const posterStatusFull = await prisma.posterStatuses.findFirst({
                  where: {
                     statusName: posterStatuses.waitPublication,
                  },
               });
               console.log("üöÄ ~ file: PosterController.ts:43 ~ PosterController ~ createPoster ~ posterStatusFull:", posterStatusFull)

               let filename;
               if (!req.file) {
                  filename = 'nophoto.jpg';
               }
               else {
                  filename = req.file.filename;
                  console.log("üöÄfor uploaded ~ file: PosterController.ts:43 ~ PosterController ~ createPoster ~ filename:", filename)
               }
               console.log("üöÄ ~ file: PosterController.ts:46 ~ PosterController ~ createPoster ~ filename:", filename)

               if (isPet) {
                  const createdPoster = await prisma.posters.create({
                     data: {
                        userId,
                        // userEmail,
                        posterStatusId: posterStatusFull?.id,
                        item,
                        breed,
                        isPet: true,
                        itemCategoryId: objectCategoryFull?.id,
                        description,
                        itemStatus,
                        dateOfAction: new Date(dateOfAction),
                        // publishDate: new Date(publishDate),
                        photoLink: filename,
                        coord0,
                        coord1,
                        address,
                        phone,
                     },
                  });
                  console.log("üöÄ pet ~ file: PosterController.ts:46 ~ PosterController ~ createPoster ~ createdPoster:", createdPoster)
               }
               else {
                  const createdPoster = await prisma.posters.create({
                     data: {
                        userId,
                        // userEmail,
                        posterStatusId: posterStatusFull?.id,
                        item,
                        isPet: false,
                        itemCategoryId: objectCategoryFull?.id,
                        description,
                        itemStatus,
                        dateOfAction: new Date(dateOfAction),
                        // publishDate,
                        photoLink: filename,
                        coord0,
                        coord1,
                        address,
                        phone,
                     },
                  });
                  console.log("üöÄ not pet ~ file: PosterController.ts:64 ~ PosterController ~ createPoster ~ createdPoster:", createdPoster)
               }

               // const message: Message = {
               //    message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ',
               // };
               const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);

               const message: Message = {
                  message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ',
                  accountInfo: {
                     isAuth: isAuth,
                     isNotAdmin: isNotAdmin,
                  }
               };
               res.status(201).json(message);
               return;
            }
            else {
               const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
               const message: Message = {
                  error: '–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
                  accountInfo: {
                     isAuth: isAuth,
                     isNotAdmin: isNotAdmin,
                  }
               };
               res.status(403).json(message);
               return;
            }

         }
         catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            // const message: Message = {
            //    error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
            // };
            const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);

            const message: Message = {
               error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
               accountInfo: {
                  isAuth: isAuth,
                  isNotAdmin: isNotAdmin,
               }
            };
            res.status(500).json(message);
            return;
         }
      }
   }


   async getPosterById(req: Request, res: Response) {
      try {
         const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
         const posterId = parseInt(req.params.id);
         if (isNaN(posterId)) {
            const message: Message = {
               error: `–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`,
               accountInfo: {
                  isAuth: isAuth,
                  isNotAdmin: isNotAdmin,
               }
            };
            res.status(404).json(message);
            return;
         }
         const poster: PosterWithReasons | null = await prisma.posters.findUnique({
            where: {
               id: posterId,
            },
            include: {
               ObjectCategories: {
                  select: {
                     category: true,
                  },
               },
               PosterStatuses: {
                  select: {
                     statusName: true
                  }
               },
               DeletedPostersAndReasons: {
                  include: {
                     PosterDeleteReasons: {
                        select: {
                           reason: true
                        }
                     }
                  }
               },
               UnpublishedPostersAnswers: {
                  select: {
                     description: true
                  }
               }
            },
         });
         const currentUserId = req.payload?.payload?.id

         if (isNotAdmin && poster && poster.userId !== currentUserId && poster.PosterStatuses?.statusName !== posterStatuses.published) {
            const message: Message = {
               error: `–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω`,
               accountInfo: {
                  isAuth: isAuth,
                  isNotAdmin: isNotAdmin,
               }
            };
            res.status(403).json(message);
            return;
         }
         if (!poster) {
            const message: Message = {
               error: `–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`,
               accountInfo: {
                  isAuth: isAuth,
                  isNotAdmin: isNotAdmin,
               }
            };
            res.status(404).json(message);
            return;
         }
         if (poster !== null) {
            const dtAct = formatDate(new Date(poster.dateOfAction))
            poster.dateOfAction = dtAct;

            if (poster.publishDate && poster.publishDate !== null) {
               const dtPub = formatDate(new Date(poster.publishDate))
               poster.publishDate = dtPub;
            }
         }
         const message: Message = {
            message: poster,
            rejectReason: poster.UnpublishedPostersAnswers[0]?.description || '',
            deleteReason: poster.DeletedPostersAndReasons[0]?.PosterDeleteReasons?.reason || '',
            accountInfo: {
               isAuth: isAuth,
               isNotAdmin: isNotAdmin,
            }
         };
         res.json(message);
         return;
      } catch (error) {
         const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
         const message: Message = {
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
            accountInfo: {
               isAuth: isAuth,
               isNotAdmin: isNotAdmin,
            }
         };
         res.status(500).json(message);
         return;
      }
   }

   async getCurrentUserPosters(req: Request, res: Response) {
      if (!req.payload) {
         // res.redirect('/auth/login');
         // const message: Message = {
         //    error: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä. –≤—Ö–æ–¥–∞',
         // };
         const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
         const message: Message = {
            error: errors.unAuthorized,
            accountInfo: {
               isAuth: isAuth,
               isNotAdmin: isNotAdmin,
            }
         };
         res.status(401).json(message)
         return;
      }
      else {
         const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);

         if (!isNotAdmin) {
            const message: Message = {
               error: '–£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
               accountInfo: {
                  isAuth: isAuth,
                  isNotAdmin: isNotAdmin,
               }
            };
            res.status(403).json(message);
            return;
         }
         // —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
         else if (req.payload?.payload?.role !== roles.user) {
            const message: Message = {
               error: errors.forbidAccess,
               accountInfo: {
                  isAuth: isAuth,
                  isNotAdmin: isNotAdmin,
               }
            };
            res.status(403).json(message);
            return;
         }

         try {
            const currentUserId = req.payload?.payload?.id;

            const userPostersArr: Poster[] = await prisma.posters.findMany({
               where: {
                  userId: currentUserId,
               },
               include: {
                  ObjectCategories: {
                     select: {
                        category: true,
                     },
                  },
                  PosterStatuses: {
                     select: {
                        statusName: true
                     }
                  },
               },
            });

            if (userPostersArr.length !== 0 && userPostersArr !== null) {
               userPostersArr.map(poster => {
                  const dtAct = formatDate(new Date(poster.dateOfAction))
                  poster.dateOfAction = dtAct;

                  if (poster.publishDate && poster.publishDate !== null) {
                     const dtPub = formatDate(new Date(poster.publishDate))
                     poster.publishDate = dtPub;
                  }

                  return poster
               })

               // const dtAct = formatDate(new Date(poster.dateOfAction))
               // poster.dateOfAction = dtAct;

               // if (poster.publishDate && poster.publishDate !== null) {
               //    const dtPub = formatDate(new Date(poster.publishDate))
               //    poster.publishDate = dtPub;
               // }

               // if (poster.itemCategoryId !== null) {
               //    const categoriesArr = await prisma.posters.findUnique({
               //       where: {
               //          id: poster.itemCategoryId,
               //       },
               //    });
               // }

            }

            if (!userPostersArr || userPostersArr.length === 0 || userPostersArr === null) {
               const message: Message = {
                  error: `–û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Ö –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–ª–∏`,
                  accountInfo: {
                     isAuth: isAuth,
                     isNotAdmin: isNotAdmin,
                  }
               };
               res.status(404).json(message);
               return;
            }

            // const message: Message = {
            //    message: poster,
            // };

            const message: Message = {
               message: userPostersArr,
               accountInfo: {
                  isAuth: isAuth,
                  isNotAdmin: isNotAdmin,
               }
            };
            res.json(message);
            return;

         }
         catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            // const message: Message = {
            //    error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
            // };
            const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);

            const message: Message = {
               error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
               accountInfo: {
                  isAuth: isAuth,
                  isNotAdmin: isNotAdmin,
               }
            };
            res.status(500).json(message);
            return;
         }
      }

   }

   async updatePosterStatus(req: Request, res: Response) {  // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –û–±—ä—è–≤–ª–µ–Ω–∏—è

      console.log('-------------------------start updatePosterStatus--------------------------------------------------------')
      if (!req.payload) {
         const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
         const message: Message = {
            error: errors.unAuthorized,
            accountInfo: {
               isAuth: isAuth,
               isNotAdmin: isNotAdmin,
            }
         };
         res.status(401).json(message)
         return;
      }
      else {
         try {

            const role = req.payload?.payload?.role;
            console.log("üöÄ ~ file: PosterController.ts:214 ~ PosterController ~ updatePoster ~ role:", role)
            // const posterIdNum = parseInt(req.params.id);
            // console.log("üöÄ ~ file: PosterController.ts:672 ~ updatePosterStatus ~ posterIdNum:", posterIdNum)



            const today: Date = getDateToday();
            console.log(today);

            if (role === roles.admin) {
               const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
               const { posterId, posterStatus, reason } = req.body;
               // const posterIdNum = parseInt(req.params.id);
               const posterIdNum = parseInt(posterId);
               if (isNaN(posterIdNum)) {

                  const message: Message = {
                     error: `–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`,
                     accountInfo: {
                        isAuth: isAuth,
                        isNotAdmin: isNotAdmin,
                     }
                  };
                  res.status(404).json(message);
                  return;
               }
               const posterStatusFull = await prisma.posterStatuses.findFirst({
                  where: {
                     statusName: posterStatus,
                  },
               });

               // –∫–Ω–æ–ø–∫–∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
               if (posterStatus === posterStatuses.published) {
                  const updatedPoster = await prisma.posters.update({
                     where: {
                        id: posterIdNum,
                     },
                     data: {
                        publishDate: today,
                        posterStatusId: posterStatusFull?.id
                     },
                  });
                  console.log("üöÄ ~ file: PosterController.ts:223 ~ PosterController ~ updatePoster ~ updatedPoster:", updatedPoster)
               }
               else {// –∫–Ω–æ–ø–∫–∞ –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                  console.log("üöÄ ~ file: PosterController.ts:222 ~ PosterController ~ updatePoster ~ reason:", reason)
                  const updatedPoster = await prisma.posters.update({
                     where: {
                        id: posterIdNum,
                     },
                     data: {
                        posterStatusId: posterStatusFull?.id
                     },
                  });

                  const createUnpublishedPosterAnswer = await prisma.unpublishedPostersAnswers.create({
                     data: {
                        posterId: posterIdNum,
                        description: reason
                     },
                  });

                  console.log("üöÄ ~ file: PosterController.ts:223 ~ PosterController ~ updatePoster ~ updatedPoster:", updatedPoster)
                  console.log("üöÄ ~ file: PosterController.ts:264 ~ PosterController ~ updatePoster ~ createUnpublishedPosterAnswer:", createUnpublishedPosterAnswer)
               }

               // const message: Message = {
               //    message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ',
               // };
               // const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
               const message: Message = {
                  message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ',
                  accountInfo: {
                     isAuth: isAuth,
                     isNotAdmin: isNotAdmin,
                  }
               };
               res.json(message);
               console.log('-------------------------end updatePosterStatus--------------------------------------------------------')
               return;

            }
            else {
               // const message: Message = {
               //    error: errors.forbidAccess + ' - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ',
               // };
               const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
               const message: Message = {
                  error: errors.forbidAccess,
                  accountInfo: {
                     isAuth: isAuth,
                     isNotAdmin: isNotAdmin,
                  }
               };
               res.status(403).json(message);
               console.log('-------------------------end else updatePosterStatus--------------------------------------------------------')
               return;
            }

         } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);

            const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
            const message: Message = {
               error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
               accountInfo: {
                  isAuth: isAuth,
                  isNotAdmin: isNotAdmin,
               }
            };
            res.status(500).json(message);
            return;
         }
      }

   }

   async updatePoster(req: Request, res: Response) {  // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ from user
      if (!req.payload) {
         const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
         const message: Message = {
            error: errors.unAuthorized,
            accountInfo: {
               isAuth: isAuth,
               isNotAdmin: isNotAdmin,
            }
         };
         res.status(401).json(message)
         return;
      }
      else {
         try {
            // console.log('--req.body', req.body);
            // console.log('--req.file', req.file);
            // res.json({ message: "Successfully uploaded files" });
            // return
            const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
            const role = req.payload?.payload?.role;
            console.log("üöÄ ~ file: PosterController.ts:214 ~ PosterController ~ updatePoster ~ role:", role)
            const posterId = req.params.id;
            // ! objectStatus –Ω–∞ UI: –ø–æ—Ç–µ—Ä—è–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ
            // publishDate –Ω–µ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è, –∞ –≤ update –æ—Ç –∞–¥–º–∏–Ω–∞
            // ! address - API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã, –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∞–ª–∞ –≤—Å–µ–º –∞–¥—Ä–µ—Å–∞–º?
            const { item, breed, isPet, objectCategory, description, itemStatus, dateOfAction, address, phone } = req.body;
            console.log("üöÄ ~ file: PosterController.ts:298 ~ PosterController ~ updatePoster ~ req.body:", req.body)
            const posterIdNum = parseInt(posterId);

            if (isNaN(posterIdNum)) {
               console.log("üöÄ ~ file: UserController.ts:135 ~ getOne ~ isNaN")

               const message: Message = {
                  error: `–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å id ${req.params.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`,
                  accountInfo: {
                     isAuth: isAuth,
                     isNotAdmin: isNotAdmin,
                  }
               };
               res.status(404).json(message);
               return;
            }

            // ! UI –≤–∞–ª–∏–¥–∞—Ü–∏—è
            // !const userEmail = req.payload?.payload?.email;
            const userEmail = req.payload?.payload?.email;
            const userId = req.payload?.payload?.id;
            console.log("üöÄ ~ file: PosterController.ts:22 ~ PosterController ~ createPoster ~ userEmail:", userEmail)

            const posterFull = await prisma.posters.findUnique({
               where: {
                  id: posterIdNum,
               },
            });

            // –º–µ–Ω—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —é–∑–µ—Ä –∏ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏
            if (role === roles.user && posterFull?.userId === userId) {

               let objectCategoryFull;
               if (objectCategory) {
                  objectCategoryFull = await prisma.objectCategories.findFirst({
                     where: {
                        category: objectCategory,
                     },
                  });
               }

               console.log("üöÄ ~ file: PosterController.ts:35 ~ PosterController ~ createPoster ~ objectCategoryFull:", objectCategoryFull)

               // –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ - –æ–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
               const posterStatusFull = await prisma.posterStatuses.findFirst({
                  where: {
                     statusName: posterStatuses.waitPublication,
                  },
               });
               console.log("üöÄ ~ file: PosterController.ts:43 ~ PosterController ~ createPoster ~ posterStatusFull:", posterStatusFull)

               // –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞, —Ç–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
               // ! —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –Ω–µ nophoto.jpg) –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ –±–¥ –Ω–∞ –Ω–æ–≤–æ–µ
               let filename;
               if (req.file) {
                  if (posterFull?.photoLink !== 'nophoto.jpg') {
                     const pathToSrcDir = path.resolve(__dirname, '..');
                     const pathIntoUploadsDir = path.join(pathToSrcDir, 'uploads/');
                     const filePath = pathIntoUploadsDir + posterFull?.photoLink;
                     console.log("üöÄ ~ file: PosterController.ts:349 ~ PosterController ~ updatePoster ~ filePath:", filePath)
                     if (fs.existsSync(filePath)) {
                        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                        fs.unlink(filePath, (err) => {
                           if (err) {
                              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', err);
                              return;
                           }
                           console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
                        });
                     }
                  }

                  filename = req.file.filename;
                  console.log("üöÄfor uploaded ~ file: PosterController.ts:43 ~ PosterController ~ updatePoster ~ filename:", filename)
               }
               console.log("üöÄ ~ file: PosterController.ts:46 ~ PosterController ~ updatePoster ~ filename:", filename)

               if (posterFull?.isPet) {
                  const updatedPoster = await prisma.posters.update({
                     where: {
                        id: posterIdNum
                     },
                     data: {
                        // userEmail,
                        posterStatusId: posterStatusFull?.id,
                        // item: item ? item : undefined,
                        breed: breed ? breed : undefined,
                        // isPet: true,
                        itemCategoryId: objectCategoryFull ? objectCategoryFull.id : undefined,
                        description: description ? description : undefined,
                        // itemStatus: itemStatus ? itemStatus : undefined,
                        // dateOfAction: dateOfAction ? new Date(dateOfAction) : undefined,
                        // publishDate: null,
                        photoLink: filename ? filename : undefined,
                        address: address ? address : undefined,
                        phone: phone ? phone : undefined,
                     },
                  });
                  console.log("üöÄ pet ~ file: PosterController.ts:46 ~ PosterController ~ updatePoster ~ updatedPoster:", updatedPoster)
               }
               else {
                  const updatedPoster = await prisma.posters.update({
                     where: {
                        id: posterIdNum
                     },
                     data: {
                        // userEmail,
                        posterStatusId: posterStatusFull?.id,
                        // item: item ? item : undefined,
                        // isPet: false,
                        itemCategoryId: objectCategoryFull ? objectCategoryFull.id : undefined,
                        description: description ? description : undefined,
                        // itemStatus: itemStatus ? itemStatus : undefined,
                        // dateOfAction: dateOfAction ? new Date(dateOfAction) : undefined,
                        // publishDate: null,
                        photoLink: filename ? filename : undefined,
                        address: address ? address : undefined,
                        phone: phone ? phone : undefined,
                     },
                  });
                  console.log("üöÄ not pet ~ file: PosterController.ts:64 ~ PosterController ~ updatePoster ~ updatedPoster:", updatedPoster)
               }

               // const message: Message = {
               //    message: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ',
               // };
               const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
               const message: Message = {
                  message: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ',
                  accountInfo: {
                     isAuth: isAuth,
                     isNotAdmin: isNotAdmin,
                  }
               };
               res.status(201).json(message);
               return;
            }
            else {
               // const message: Message = {
               //    error: errors.forbidAccess + ' - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ',
               // };
               const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
               const message: Message = {
                  error: errors.forbidAccess,
                  accountInfo: {
                     isAuth: isAuth,
                     isNotAdmin: isNotAdmin,
                  }
               };
               res.status(403).json(message);
               return;
            }


         } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            // const message: Message = {
            //    error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
            // };

            const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
            const message: Message = {
               error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
               accountInfo: {
                  isAuth: isAuth,
                  isNotAdmin: isNotAdmin,
               }
            };

            res.status(500).json(message);
            return;
         }
      }
   }

   async deletePoster(req: Request, res: Response) {
      // ! –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞—Ç—É—Å–µ –û–∂–∏–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
      if (!req.payload) {
         const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
         const message: Message = {
            error: errors.unAuthorized,
            accountInfo: {
               isAuth: isAuth,
               isNotAdmin: isNotAdmin,
            }
         };
         res.status(401).json(message)
         return;
      }
      else {
         try {
            const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
            const role = req.payload?.payload?.role;
            const userId = req.payload?.payload?.id;
            console.log("üöÄ ~ file: PosterController.ts:214 ~ PosterController ~ updatePoster ~ role:", role)

            const { posterId, reason } = req.body;
            console.log("üöÄ ~ file: PosterController.ts:298 ~ PosterController ~ updatePoster ~ req.body:", req.body)

            const posterIdNum = parseInt(posterId);

            if (isNaN(posterIdNum)) {
               console.log("üöÄ ~ file: UserController.ts:135 ~ getOne ~ isNaN")

               const message: Message = {
                  error: `–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å id ${posterId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`,
                  accountInfo: {
                     isAuth: isAuth,
                     isNotAdmin: isNotAdmin,
                  }
               };
               res.status(404).json(message);
               return;
            }

            const posterToUpdate = await prisma.posters.findUnique({
               where: {
                  id: posterIdNum,
               },
               include: {
                  ObjectCategories: {
                     select: {
                        category: true,
                     },
                  },
                  PosterStatuses: {
                     select: {
                        statusName: true
                     }
                  },
               },
            });

            // user: –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å "–æ–∂–∏–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", —É–¥–∞–ª–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            if (role === roles.user && userId === posterToUpdate?.userId
               && posterToUpdate?.PosterStatuses?.statusName !== posterStatuses.waitDelete
               && posterToUpdate?.PosterStatuses?.statusName !== posterStatuses.deleted) {
               const posterStatusFull = await prisma.posterStatuses.findFirst({
                  where: {
                     statusName: posterStatuses.waitDelete,
                  },
               });

               // —Å—Ç–∞—Ç—É—Å "–æ–∂–∏–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"
               const updatedPoster = await prisma.posters.update({
                  where: {
                     id: posterIdNum,
                  },
                  data: {
                     posterStatusId: posterStatusFull?.id
                  },
               });
               console.log("üöÄ ~ file: PosterController.ts:463 ~ PosterController ~ deletePoster ~ updatedPoster:", updatedPoster)
               // const message: Message = {
               //    message: '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ',
               // };

               const posterDeleteReasonsFull = await prisma.posterDeleteReasons.findFirst({
                  where: {
                     reason: reason,
                  },
               });
               console.log("üöÄ ~ file: PosterController.ts:262 ~ PosterController ~ updatePoster ~ posterDeleteReasonsFull:", posterDeleteReasonsFull)

               // —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
               const createDeletePosterReason = await prisma.deletedPostersAndReasons.create({
                  data: {
                     posterId: posterIdNum,
                     deleteReasonId: posterDeleteReasonsFull?.id
                  },
               });
               console.log("üöÄ ~ file: PosterController.ts:470 ~ PosterController ~ deletePoster ~ createDeletePosterReason:", createDeletePosterReason)


               const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
               const message: Message = {
                  message: '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ',
                  accountInfo: {
                     isAuth: isAuth,
                     isNotAdmin: isNotAdmin,
                  }
               };
               res.json(message);
               return;
            }
            // admin: –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å "—É–¥–∞–ª–µ–Ω–æ"
            else if (role === roles.admin && posterToUpdate?.PosterStatuses?.statusName === posterStatuses.waitDelete || posterToUpdate?.PosterStatuses?.statusName === posterStatuses.waitPublication) {
               const posterStatusFull = await prisma.posterStatuses.findFirst({
                  where: {
                     statusName: posterStatuses.deleted,
                  },
               });

               const updatedPoster = await prisma.posters.update({
                  where: {
                     id: posterIdNum,
                  },
                  data: {
                     posterStatusId: posterStatusFull?.id
                  },
               });
               console.log("üöÄ ~ file: PosterController.ts:487 ~ PosterController ~ deletePoster ~ updatedPoster:", updatedPoster)

               if (posterToUpdate?.PosterStatuses?.statusName === posterStatuses.waitPublication) {
                  const posterDeleteReasonsFull = await prisma.posterDeleteReasons.findFirst({
                     where: {
                        reason: '–¥—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞',
                     },
                  });

                  // —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                  const createDeletePosterReason = await prisma.deletedPostersAndReasons.create({
                     data: {
                        posterId: posterIdNum,
                        deleteReasonId: posterDeleteReasonsFull?.id
                     },
                  });
               }
               // const message: Message = {
               //    message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ',
               // };
               const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
               const message: Message = {
                  message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ',
                  accountInfo: {
                     isAuth: isAuth,
                     isNotAdmin: isNotAdmin,
                  }
               };
               res.json(message);
               return;
            }
            // –æ—Å—Ç–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —É–¥–∞–ª—è—Ç—å
            else {
               // const message: Message = {
               //    error: errors.forbidAccess + ' - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ',
               // };
               const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
               const message: Message = {
                  error: errors.forbidAccess,
                  accountInfo: {
                     isAuth: isAuth,
                     isNotAdmin: isNotAdmin,
                  }
               };
               res.status(403).json(message);
               return;
            }

         } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            // const message: Message = {
            //    error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
            // };
            const { isAuth, isNotAdmin } = returnUserInfoToMakeDecisions(req);
            const message: Message = {
               error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
               accountInfo: {
                  isAuth: isAuth,
                  isNotAdmin: isNotAdmin,
               }
            };
            res.status(500).json(message);
            return;
         }
      }

   }
}

export default new PosterController();
