generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model DeletedPostersAndReasons {
  id                  Int                  @id(map: "PK__DeletedP__3213E83F4767095B") @default(autoincrement())
  posterId            Int?
  deleteReasonId      Int?
  PosterDeleteReasons PosterDeleteReasons? @relation(fields: [deleteReasonId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "DeleteReasons_fk")
  Posters             Posters?             @relation(fields: [posterId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Posters_fk")
}

model ObjectCategories {
  id                          Int                           @id(map: "PK__ObjectCa__3213E83FDBFBC129") @default(autoincrement())
  category                    String                        @db.VarChar(30)
  isPet                       Boolean
  Posters                     Posters[]
  PostersWaitForUpdateApprove PostersWaitForUpdateApprove[]
}

model PosterComments {
  id                 Int      @id(map: "PK__PosterCo__3213E83FD21D85F6") @default(autoincrement())
  posterId           Int?
  userId             Int?
  comment            String   @db.VarChar(1000)
  creationDate       DateTime
  readByPosterAuthor Boolean
  approved           Boolean
  changedByAuthor    Boolean
  complaintsCount    Int
  Posters            Posters? @relation(fields: [posterId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "PostersComments_fk")
  Users              Users?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UsersComments_fk")
}

model PosterDeleteReasons {
  id                       Int                        @id(map: "PK__PosterDe__3213E83F85356AB4") @default(autoincrement())
  reason                   String                     @db.VarChar(25)
  DeletedPostersAndReasons DeletedPostersAndReasons[]
}

model Posters {
  id                        Int                         @id(map: "PK__Posters__3213E83F69CB8103") @default(autoincrement())
  userId                    Int?
  posterStatusId            Int?
  item                      String                      @db.VarChar(100)
  breed                     String?                     @db.VarChar(60)
  isPet                     Boolean
  itemCategoryId            Int?
  description               String                      @db.VarChar(1000)
  itemStatus                String                      @db.VarChar(175)
  dateOfAction              DateTime                    @db.Date
  publishDate               DateTime?                   @db.Date
  photoLink                 String                      @db.VarChar(500)
  address                   String                      @db.VarChar(175)
  coord0                    String                      @db.VarChar(53)
  coord1                    String                      @db.VarChar(53)
  phone                     String                      @db.VarChar(18)
  DeletedPostersAndReasons  DeletedPostersAndReasons[]
  PosterComments            PosterComments[]
  ObjectCategories          ObjectCategories?           @relation(fields: [itemCategoryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ObjectCategories_fk")
  PosterStatuses            PosterStatuses?             @relation(fields: [posterStatusId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "PosterStatuses_fk")
  Users                     Users?                      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Users_fk")
  UnpublishedPostersAnswers UnpublishedPostersAnswers[]
}

model PosterStatuses {
  id                          Int                           @id(map: "PK__PosterSt__3213E83F0140A5BE") @default(autoincrement())
  statusName                  String                        @db.VarChar(25)
  Posters                     Posters[]
  PostersWaitForUpdateApprove PostersWaitForUpdateApprove[]
}

model UnpublishedPostersAnswers {
  id          Int      @id(map: "PK__Unpublis__3213E83FEEFD54F8") @default(autoincrement())
  posterId    Int?
  description String   @db.VarChar(1000)
  Posters     Posters? @relation(fields: [posterId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "PostersUnpublished_fk")
}

model Users {
  id                          Int                           @id(map: "PK__Users__3213E83F18A527A1") @default(autoincrement())
  email                       String                        @db.VarChar(60)
  name                        String                        @db.VarChar(60)
  password                    String                        @db.VarChar(70)
  phone                       String                        @db.VarChar(18)
  address                     String                        @db.VarChar(175)
  coord0                      String                        @db.VarChar(53)
  coord1                      String                        @db.VarChar(53)
  role                        String                        @db.VarChar(10)
  lastActivityTime            DateTime
  PosterComments              PosterComments[]
  Posters                     Posters[]
  PostersWaitForUpdateApprove PostersWaitForUpdateApprove[]
}

model PostersWaitForUpdateApprove {
  id               Int               @id(map: "PK__PostersW__3213E83F7EB86066")
  userId           Int?
  posterStatusId   Int?
  item             String            @db.VarChar(100)
  breed            String?           @db.VarChar(60)
  isPet            Boolean
  itemCategoryId   Int?
  description      String            @db.VarChar(1000)
  itemStatus       String            @db.VarChar(175)
  dateOfAction     DateTime          @db.Date
  publishDate      DateTime?         @db.Date
  photoLink        String            @db.VarChar(500)
  address          String            @db.VarChar(175)
  coord0           String            @db.VarChar(53)
  coord1           String            @db.VarChar(53)
  phone            String            @db.VarChar(18)
  ObjectCategories ObjectCategories? @relation(fields: [itemCategoryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ObjectCategoriesUpd_fk")
  PosterStatuses   PosterStatuses?   @relation(fields: [posterStatusId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "PosterStatusesUpd_fk")
  Users            Users?            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "UsersUPD_fk")
}
